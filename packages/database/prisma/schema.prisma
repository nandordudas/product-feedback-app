generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  name               String
  userName           String               @unique @map("user_name")
  password           String
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime?            @updatedAt @map("updated_at")
  Comment            Comment[]
  Feedback           Feedback[]
  FeedbackUserUpvote FeedbackUserUpvote[]

  @@map("users")
}

model Feedback {
  id                 Int                  @id @default(autoincrement())
  title              String
  detail             String
  status             FeedbackStatus       @default(PLANNED)
  authorId           Int                  @map("author_id")
  categoryId         Int                  @map("feedback_category_id")
  Author             User                 @relation(fields: [authorId], references: [id])
  Category           FeedbackCategory     @relation(fields: [categoryId], references: [id])
  Comment            Comment[]
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime?            @updatedAt @map("updated_at")
  FeedbackUserUpvote FeedbackUserUpvote[]

  @@map("feedbacks")
}

model FeedbackUserUpvote {
  userId     Int       @map("user_id")
  feedbackId Int       @map("feedback_id")
  hasUpvote  Boolean   @default(false) @map("has_upvote")
  User       User      @relation(fields: [userId], references: [id])
  Feedback   Feedback  @relation(fields: [feedbackId], references: [id])
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  @@id([userId, feedbackId, hasUpvote], name: "feedbackUserUpvote")
  @@map("feedback_user_upvote")
}

model FeedbackCategory {
  id        Int        @id @default(autoincrement())
  title     String
  Feedback  Feedback[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime?  @updatedAt @map("updated_at")

  @@map("feedback_category")
}

model Comment {
  id         Int       @id @default(autoincrement())
  body       String
  authorId   Int       @map("author_id")
  feedbackId Int       @map("feedback_id")
  parentId   Int?      @map("parent_id")
  Author     User      @relation(fields: [authorId], references: [id])
  Feedback   Feedback  @relation(fields: [feedbackId], references: [id])
  Parent     Comment?  @relation("Parent", fields: [parentId], references: [id])
  Children   Comment[] @relation("Parent")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  @@map("comments")
}

enum FeedbackStatus {
  IN_PROGRESS
  LIVE
  PLANNED
}
